from typing import List
from datetime import date



class User:
    """
    Class for users.
    === Public Attributes ===
    user_name: the username that we allow (further update => restrict username?)
    #TODO
    fav_book_series:
    === Private Attributes ===
    _user_id: Autogenerated id for each user
    _created_date: Autogenerated joined date

    """
    user_name: str

    _user_id: int
    _created_date: date
    following: list
    #follower ?

    def __init__(self, user_name: str, ):
        self.user_name = user_name

class Series:
    """
    Lets see if we have time for this
    """




class Rating:
    """
    Class for rating any book.
    === Public Attributes ===
    rating: how this user rates the book.
    Comment: their comment
    like: how other reacts to it?? (less priority)
    # replies: reply on a comment
    """
    rating: float
    comment: str
    like: int
    #replies: list[]

    def __init__(self, rating: float, comment: str) -> None:
        self.rating = rating
        self.comment = comment
        self.like = 0
        self.replies = Rating

    def like(self) -> None:
        """you like it. Or unlike it #TODO think about how to unlike"""
        self.like += 1

class Post:
    """
    Class for post.
    === Public Attributes ===
    Book: What this post
    :

    === Private Attributes ===


    === Representation Invariants ===

    """


class Book:
    """
    Class for books.
    === Public Attributes ===
    title: the book name
    author: Author's name
    genre: book genre

    === Private Attributes ===


    === Representation Invariants ===

    """
    title: str
    author: str
    genre: str
    # date: release date?
    rate: List[Rating]
    # pending: if this book is approved or not?
    thread: List[Post]

    def __init__(self, title: str, author: str, genre: str ) -> None:
        self.title = title
        self.author = author
        self.genre = genre
        self.rate = []
        self.thread = []


    def add_rating(self, new_rate: Rating) -> None:
        """
        adds rating of the book.
        *currently I'm just appending it to a list, maybe make it into a dict?? idk*
        """
        self.rate.append(new_rate)

    def calculate_rate(self) -> float:
        """
        Calculate the rating out of 5 stars
        :return:
        """
        # uhhh i dont remember the optimal way of doing this
        i = 0
        count = 0
        for item in self.rate:
            i += 1
            count += item.rating

        return count/i if i != 0 else 0

